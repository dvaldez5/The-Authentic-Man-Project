=================================================================
THE AM PROJECT - COMPLETE APPLICATION CODE EXPORT
=================================================================

This file contains all the essential code for The AM Project application.
Copy and paste each section as needed to recreate the application.

=================================================================
PROJECT STRUCTURE
=================================================================

theamproject/
├── package.json
├── tsconfig.json
├── vite.config.ts
├── tailwind.config.ts
├── drizzle.config.ts
├── postcss.config.js
├── components.json
├── client/
│   ├── index.html
│   ├── src/
│   │   ├── main.tsx
│   │   ├── App.tsx
│   │   ├── index.css
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── pages/
│   │   ├── lib/
│   │   └── contexts/
│   └── public/
├── server/
│   ├── index.ts
│   ├── auth.ts
│   ├── db.ts
│   ├── routes.ts
│   └── storage.ts
├── shared/
│   └── schema.ts
└── scripts/

=================================================================
PACKAGE.JSON
=================================================================

{
  "name": "rest-express",
  "module": "index.ts",
  "type": "module",
  "scripts": {
    "build": "npm run build:client && npm run build:server",
    "build:client": "vite build --outDir ../dist/client",
    "build:server": "tsc --outDir ../dist/server",
    "dev": "NODE_ENV=development tsx server/index.ts",
    "start": "NODE_ENV=production node dist/server/index.js",
    "db:generate": "drizzle-kit generate",
    "db:push": "drizzle-kit push",
    "db:studio": "drizzle-kit studio",
    "upload-course": "tsx scripts/upload-course.ts",
    "content-manager": "tsx scripts/content-manager.ts",
    "seed-challenges": "tsx scripts/seed-challenges.ts",
    "seed-scenarios": "tsx scripts/seed-scenarios.ts"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.1",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@replit/vite-plugin-cartographer": "1.0.4",
    "@replit/vite-plugin-runtime-error-modal": "1.0.2",
    "@tailwindcss/typography": "^0.5.15",
    "@tanstack/react-query": "^5.59.16",
    "@types/bcryptjs": "^2.4.6",
    "@types/compression": "^1.7.5",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "^4.17.21",
    "@types/express-session": "^1.18.0",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/memoizee": "^0.4.11",
    "@types/node": "^22.7.4",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.0",
    "@types/ws": "^8.5.12",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "bcryptjs": "^2.4.3",
    "caniuse-lite": "^1.0.30001669",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "1.0.0",
    "compression": "^1.7.4",
    "connect-pg-simple": "^10.0.0",
    "date-fns": "^4.1.0",
    "drizzle-kit": "^0.28.1",
    "drizzle-orm": "^0.36.4",
    "drizzle-zod": "^0.5.1",
    "embla-carousel-react": "^8.3.0",
    "esbuild": "^0.24.0",
    "express": "^4.21.1",
    "express-session": "^1.18.1",
    "framer-motion": "^11.11.17",
    "input-otp": "^1.4.1",
    "jsonwebtoken": "^9.0.2",
    "lucide-react": "^0.453.0",
    "memoizee": "^0.4.17",
    "memorystore": "^1.6.7",
    "next-themes": "^0.4.3",
    "openai": "^4.69.0",
    "openid-client": "^6.1.3",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "postcss": "^8.4.47",
    "react": "^18.3.1",
    "react-day-picker": "^9.1.3",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-icons": "^5.3.0",
    "react-markdown": "^9.0.1",
    "react-resizable-panels": "^2.1.4",
    "recharts": "^2.12.7",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "tailwind-merge": "^2.5.3",
    "tailwindcss": "^3.4.13",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.19.1",
    "tw-animate-css": "^1.0.5",
    "typescript": "^5.6.2",
    "vaul": "^1.0.0",
    "vite": "^5.4.8",
    "vite-plugin-pwa": "^0.21.1",
    "wouter": "^3.3.5",
    "ws": "^8.18.0",
    "zod": "^3.23.8",
    "zod-validation-error": "^3.4.0"
  }
}

=================================================================
CLIENT/INDEX.HTML
=================================================================

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
    
    <!-- Default Meta Tags -->
    <title>The AM Project - Redefining Modern Manhood</title>
    <meta name="description" content="Your personal development journey. Access courses, journal, challenges, and community features." />
    
    <!-- Open Graph / Facebook Meta Tags -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://theamproject.com/" />
    <meta property="og:title" content="The AM Project - Redefining Modern Manhood" />
    <meta property="og:description" content="The AM Project helps men build strength, integrity, and purpose through actionable content and community." />
    <meta property="og:image" content="/images/mountain-climbers.jpg" />
    
    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="The AM Project - Redefining Modern Manhood" />
    <meta name="twitter:description" content="The AM Project helps men build strength, integrity, and purpose through actionable content and community." />
    <meta name="twitter:image" content="/images/mountain-climbers.jpg" />
    
    <link rel="icon" href="/app-icon-192.png" type="image/png" />
    
    <!-- Font Preconnects -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#7C4A32">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="AM Project">
  </head>
  <body>
    <div id="root"></div>
    <script>
      // MINIMAL PWA DETECTION: Only for genuine standalone installations
      (function() {
        // Clear any contaminated PWA state
        const isReplitDev = /Replit-Bonsai/i.test(navigator.userAgent);
        if (isReplitDev) {
          localStorage.removeItem('pwaMode');
          return;
        }
        
        // Only allow PWA for actual standalone mode
        const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
        const isIOSStandalone = window.navigator.standalone === true;
        const isPWAParam = window.location.search.includes('pwa=true');
        
        if (isStandalone || isIOSStandalone || isPWAParam) {
          localStorage.setItem('pwaMode', 'true');
        } else {
          // Clear PWA state for mobile browsers
          localStorage.removeItem('pwaMode');
        }
      })();
    </script>
    <script type="module" src="/src/main.tsx"></script>
    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
  </body>
</html>

=================================================================
CLIENT/SRC/MAIN.TSX
=================================================================

import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

// PWA meta tags and fonts are handled by index.html for better performance

// Register PWA Service Worker with forced updates
try {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js', { updateViaCache: 'none' })
      .then(async (registration) => {
        // Force immediate update for downloaded PWAs
        if (registration.waiting) {
          registration.waiting.postMessage({ type: 'SKIP_WAITING' });
        }
        
        // Listen for updates and reload when new version available
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                window.location.reload();
              }
            });
          }
        });
        
        console.log('PWA Service Worker registered');
      })
      .catch(err => console.log('PWA Service Worker registration failed:', err));
  }
} catch (error) {
  console.warn('Failed to register service worker:', error);
}

// Safely render React app
try {
  const rootElement = document.getElementById("root");
  if (rootElement && typeof createRoot !== 'undefined') {
    createRoot(rootElement).render(<App />);
  }
} catch (error) {
  console.error('Failed to render React app:', error);
}

=================================================================
CONTINUE IN NEXT SECTION...
=================================================================