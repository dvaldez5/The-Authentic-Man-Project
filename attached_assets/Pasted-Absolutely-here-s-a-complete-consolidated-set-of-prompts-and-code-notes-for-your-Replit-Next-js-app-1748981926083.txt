Absolutely—here’s a complete, consolidated set of prompts and code notes for your Replit/Next.js app, ensuring:

* **No static welcome overlay or sign-in wall**
* **Anyone can open chat**; up to 5 messages/hour for guests
* On first open (with no history), AM greets:

  * **If first name known:** “Hey \[Name], what’s up?”
  * **Otherwise:** “Hey, what’s up?”
* The chat UI is minimal, beautiful, and fully on-brand.

---

### **AMChat.js — Beautiful, Modern, On-Brand, and Personalized**

```jsx
import { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import Cookie from 'js-cookie';
import jwtDecode from 'jwt-decode';

export default function AMChat() {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [context, setContext] = useState('public');
  const [firstName, setFirstName] = useState('');
  const scrollRef = useRef();

  useEffect(() => {
    // Context: dashboard/member vs. public
    const pathname = window.location.pathname;
    if (
      pathname.startsWith('/dashboard') ||
      pathname.startsWith('/courses') ||
      pathname.startsWith('/community') ||
      pathname.startsWith('/pod') ||
      pathname.startsWith('/journal')
    ) {
      setContext('dashboard');
    } else {
      setContext('public');
    }
    fetchHistory();

    // Try to get first name from JWT
    const jwt = Cookie.get('jwt');
    if (jwt) {
      try {
        const { fullName } = jwtDecode(jwt);
        if (fullName) setFirstName(fullName.split(' ')[0]);
      } catch {}
    }
  }, []);

  useEffect(() => {
    // On first open, no messages/history: greet
    if (open && messages.length === 0 && !loading) {
      setMessages([
        {
          role: 'am',
          text: firstName
            ? `Hey ${firstName}, what’s up?`
            : "Hey, what’s up?",
          timestamp: new Date().toISOString(),
        },
      ]);
    }
    scrollToBottom();
    // eslint-disable-next-line
  }, [open, messages, loading, firstName]);

  const fetchHistory = async () => {
    try {
      const params = { context };
      const res = await axios.get('/api/ai/chat/history', { params });
      setMessages(res.data.messages);
    } catch {
      setMessages([]);
    }
  };

  const sendMessage = async () => {
    if (!input.trim()) return;
    // Guest throttle: 5 messages/hr
    if (context === 'public' && !Cookie.get('jwt')) {
      const now = Date.now();
      const log = JSON.parse(localStorage.getItem('amPublicLog') || '[]');
      const windowStart = now - 60 * 60 * 1000;
      const recent = log.filter(ts => ts > windowStart);
      if (recent.length >= 5) {
        setMessages(prev => [
          ...prev,
          {
            role: 'am',
            text:
              "You’ve hit your free chat limit for this hour. Sign up to keep the conversation going and unlock everything AM can offer.",
            timestamp: new Date().toISOString(),
          },
        ]);
        return;
      }
      recent.push(now);
      localStorage.setItem('amPublicLog', JSON.stringify(recent));
    }
    const newUserMsg = { role: 'user', text: input.trim(), timestamp: new Date().toISOString() };
    setMessages(prev => [...prev, newUserMsg]);
    setLoading(true);
    setInput('');

    try {
      const res = await axios.post('/api/ai/chat', {
        text: input.trim(),
        context,
        firstName,
      });
      setMessages(prev => [
        ...prev,
        { role: 'am', text: res.data.reply, timestamp: new Date().toISOString() },
      ]);
    } catch {
      setMessages(prev => [
        ...prev,
        { role: 'am', text: 'Something went wrong. Try again in a bit.', timestamp: new Date().toISOString() },
      ]);
    } finally {
      setLoading(false);
      scrollToBottom();
    }
  };

  const scrollToBottom = () => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  };

  return (
    <>
      <button
        onClick={() => setOpen(!open)}
        className="fixed bottom-4 right-4 z-50 bg-[#7C4A32] text-[#E4B768] rounded-full w-14 h-14 flex items-center justify-center shadow-lg"
        aria-label={open ? "Close chat" : "Open chat"}
      >
        {open ? '×' : 'AM'}
      </button>

      {open && (
        <div
          className="fixed bottom-4 right-4 z-50 flex flex-col w-[95vw] sm:w-[400px] h-[75vh] sm:h-[65vh] bg-white rounded-lg shadow-lg overflow-hidden border border-[#E4B768]"
        >
          <div className="flex items-center justify-between bg-[#7C4A32] px-4 py-2">
            <span className="text-[#E4B768] font-semibold text-lg">AM</span>
            <button onClick={() => setOpen(false)} className="text-[#E4B768] text-xl hover:text-[#F5EDE1]">×</button>
          </div>

          <div ref={scrollRef} className="flex-1 overflow-y-auto p-4 bg-[#F5EDE1] flex flex-col gap-2">
            {messages.map((msg, idx) => (
              <div key={idx} className={`flex flex-col ${msg.role === 'user' ? 'items-end' : 'items-start'}`}>
                <div
                  className={
                    msg.role === 'user'
                      ? "bg-[#7C4A32] text-white rounded-2xl px-4 py-2 max-w-[80%] text-base"
                      : "bg-white text-[#333333] rounded-2xl px-4 py-2 max-w-[80%] text-base"
                  }
                >
                  {msg.text}
                </div>
                <span className="text-xs text-[#333333] opacity-60 mt-1">
                  {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </span>
              </div>
            ))}
          </div>

          <div className="flex items-center px-3 py-2 bg-white border-t border-[#E4B768]">
            <input
              type="text"
              value={input}
              onChange={e => setInput(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && sendMessage()}
              placeholder="Type your message…"
              className="flex-grow bg-white border border-[#E4B768] text-[#7C4A32] rounded-2xl px-3 py-2 focus:outline-none"
              disabled={loading}
            />
            <button
              onClick={sendMessage}
              disabled={loading || !input.trim()}
              className="ml-2 bg-[#E4B768] text-[#7C4A32] font-bold rounded-2xl px-4 py-2 hover:bg-[#F5EDE1] disabled:opacity-60"
            >
              {loading ? (
                <div className="animate-spin h-5 w-5 border-2 border-[#E4B768] border-t-transparent rounded-full"></div>
              ) : (
                'Send'
              )}
            </button>
          </div>
        </div>
      )}
    </>
  );
}
```

---

### **Update your backend OpenAI system prompt (`pages/api/ai/chat/index.js`):**

```js
const systemPrompt = {
  role: 'system',
  content: `
You are “AM,” a best friend in a man’s pocket for The Authentic Man Project. Always respond like you’re texting a close friend—short, direct, and empathetic, not scripted or formal.
- If you know the user's first name, address them by it (“Hey Jake,” “Hey man,” etc.).
- If a user is on a public page, only recommend blog articles, AM Radio episodes, newsletter signup, or free resources—never mention courses or dashboard features.
- If a user is inside the dashboard or logged in, you can reference lessons, journal prompts, and member resources.
- Never mention persona tag, internal systems, or company details—just be real.
- If you don’t know, say so and suggest an alternative.
- Every reply is 2–3 text-style paragraphs max, in conversational tone.
`
}
```

*Pass the first name as a variable to the backend if possible, and insert into the system prompt, or let the model see it in the message thread.*

---

**Summary:**

* The first AM message is always “Hey, what’s up?” or “Hey \[Name], what’s up?”
* AM is always accessible—no sign-in required to chat (with throttle).
* UI is simple, beautiful, and totally on-brand.
* AM’s responses and guidance always fit the page context.

---

Give this to your developer or drop it into Replit as a guide. If you need a cut/paste backend route, just ask!
